;╔═════════════════════════════════════════════════════════════════════════════════════════════════
;║     navigation_panel.pbi                                                                           
;╠═════════════════════════════════════════════════════════════════════════════════════════════════
;║     Created: 06-08-2025 
;║
;║     Copyright (c) 2025 James Dooley <james@dooley.ch>
;║
;║     History:
;║     06-08-2025: Initial version
;╚═════════════════════════════════════════════════════════════════════════════════════════════════
DeclareModule NavigationPanelUI
  
  ; Record used to provide configuration information for an 
  ; instance of the navigation panel
  Structure NavigationPanelConfigInfo
    BackgroundColor.l               ; - The panel background color
    ItemBackgroundColor.l           ; - The item background color
    ItemSelectedBackgroundColor.l   ; - The selected item background color
    ItemSelectedTextColor.l         ; - The selected item text color 
    Flags.i                         ; - The flags used to create the panel (the flags for the ContainerGadget)
  EndStructure
  
  Prototype OnNavigationItemClick()   ; The header for the function to be executed, if the item is clicked on
  
  Declare.b CreateNavigationPanel(hWindow.i)    ; Creates the navigation panel in the given window
  
  Declare.b InitNavigationPanelConfig(*cfg.NavigationPanelConfigInfo)   ; Initializes an instance of the configuration record
  Declare.b SetNavigationPanelConfig(*cfg.NavigationPanelConfigInfo)    ; Sets the navigation panel configuration
  
  Declare.b AddNavigationItem(id.i, name$, imageId.i, callback.OnNavigationItemClick, 
                              hotImageId.i = #PB_Ignore, disabledImageId.i = #PB_Ignore)    ; Adds an item to the navigation panel
  Declare.b RemoveNavigationItem(id.i)                                                      ; Removes an item from the navigation panel
  Declare.b DisableNavigationItem(id.i, value.b = #True)                                    ; Disable or enable a given item, based on the value passed
  Declare.b SelectNavigationItem(id.i, flag.b = #True, executeProc.b = #False)              ; Programmatically select an item in the navigation panel
  
  Declare.i GetNavigationPanelId() ; Returns the id of the container panel used to host the navigation panel
  
  Declare.s NavigationPanelUIError() ; Returns last error generated by the library

EndDeclareModule

Module NavigationPanelUI
  EnableExplicit
  
  ; Holds the parameters needed to locate the items in the panel
  #TOP_ITEM_Y = 8
  #ITEM_VERTICAL_PADDING = 5
  #ITEM_HORIZONTAL_PADDING = 10
  
  #ITEM_HEIGHT = 30 ; Holds the item details - only the height is static
  
  ; Holds the parameters for the logo
  #LOGO_X = 5
  #Logo_Y = 3
  #LOGO_Width = 48
  #LOGO_Height = 48
  
  ; Holds the parameters for the item label
  #LABEL_X = 40
  #LABEL_Y = 6
  #LABEL_HEIGHT = 25
  #LABEL_FONT_SIZE = 16
  
  Structure NavigationItemInfo ; Holds the details of an item in the navigation panel
    id.i
    name.s
    image.i
    hotImage.i
    disabledImage.i
    disabled.b
    callback.OnNavigationItemClick
    itemId.i
    itemX.i
    itemY.i
    itemHeight.i
    itemEnabled.b
    hIcon.i
    hLabel.i
  EndStructure
  
  Define NewList items.NavigationItemInfo()     ; Holds the details of the items contained in the panel
  Define lastError$ = ""                        ; Holds the last error message generated by the library
  Define.i hMainWindow                          ; Holds the ID of the host window,
  Define hNavPanel                              ; Holds the id of the navigation panel
  Define configInfo.NavigationPanelConfigInfo   ; Holds the panel's configuration information
  Define currentItemId.i = 0                    ; Holds the id of the currently selected item, if any
  
  InitNavigationPanelConfig(@configInfo) ; Sets the defdault configuration for the panel
  
  ; Handles the request to recsize the navigation panel's contents
  ;
  ; Note: The only requirement is to set the size of the items to fill the width of the navigation panel
  ;
  Procedure OnResizeNavigationPanel()
    Shared hNavPanel, items()
    Define itemWidth = GadgetWidth(hNavPanel, #PB_Gadget_ActualSize) - (#ITEM_HORIZONTAL_PADDING * 2)
    
    ResetList(items())
    ForEach items()
      With items()
        ResizeGadget(\itemId, \itemX, \itemY, itemWidth, \itemHeight)
      EndWith
    Next
  EndProcedure
  
  ; Invoked when an item in the navigation panel
  ;
  Procedure OnItemClicked()
    Shared items()
    Protected itemId.i = GetActiveGadget()  ; Determine which item was selected
    Protected id.i
    
    If IsGadget(itemId)
      id = GetGadgetData(itemId) ; Get the item id, which is stored in the data slot of the item
      
      ; Find the item's details in the list based on it's id
      ResetList(items())
      ForEach items()
        If items()\id = id
          SelectNavigationItem(id)    ; Select the item 
          items()\callback()          ; Invoke the method associated with the item
          Break
        EndIf
      Next
    EndIf
  EndProcedure
  
  ; Checks if an item exists in the list of items
  ;
  ; Returns: #True if the item exists, otherwise #False
  ;
  Procedure.b ItemExists(id.i)
    Shared items()
    
    ResetList(items())
    
    ForEach items()
      If items()\id = id
        ProcedureReturn #True
      EndIf
    Next
    
    ProcedureReturn #False
  EndProcedure
  
  ; Displays the items on the navigation panel
  ;
  Procedure LoadItems()
    Protected.i hFont, itemY = #TOP_ITEM_Y
    Shared hNavPanel, configInfo, items() 
    
    If Not IsGadget(hNavPanel)
      ProcedureReturn
    EndIf
    
    ; Clean up existing content - Recalculate the Y location for each gadget and delete existing items from the panel
    ResetList(items())
    ForEach items()
      items()\itemY = itemY
      If IsGadget(items()\itemId)
        FreeGadget(items()\itemId)
      EndIf
      
      itemY = itemY + items()\itemHeight + #ITEM_VERTICAL_PADDING
    Next
    
    Define itemWidth = GadgetWidth(hNavPanel, #PB_Gadget_ActualSize) - (#ITEM_HORIZONTAL_PADDING * 2)
    
    ; Add the items to the panel
    ResetList(items())
    OpenGadgetList(hNavPanel)
    
    hFont = LoadFont(#PB_Any, "", #LABEL_FONT_SIZE)
    
    ForEach items()
      With items()
        \itemId = CanvasGadget(#PB_Any, \itemX, \itemY, itemWidth, \itemHeight, #PB_Canvas_Container | #PB_Canvas_DrawFocus)
          items()\hIcon = ImageGadget(#PB_Any, #LOGO_X, #LOGO_Y, #LOGO_Width, #LOGO_Height, \image)
          items()\hLabel = TextGadget(#PB_Any, #LABEL_X, #LABEL_Y, 200, #LABEL_HEIGHT, \name)
        CloseGadgetList()
        
        ; Config item
        SetGadgetFont(\hLabel, FontID(hFont))
        SetGadgetColor(\hLabel, #PB_Gadget_FrontColor, #Black)
        SetGadgetColor(\itemId, #PB_Gadget_BackColor, configInfo\ItemBackgroundColor)
        SetGadgetData(\itemId, \id)
        BindGadgetEvent(\itemId, @OnItemClicked(), #PB_EventType_LeftClick)
      EndWith
    Next
    
    CloseGadgetList()
  EndProcedure
  
  ;┌───────────────────────────────────────────────────────────────────────────────────────────────
  ;│     Public     
  ;└───────────────────────────────────────────────────────────────────────────────────────────────

  ; Returns last error generated by the library
  ;
  Procedure.s NavigationPanelUIError()
    Shared lastError$
    ProcedureReturn lastError$
  EndProcedure
  
  ; Creates the navigation panel in the given window
  ;
  ; Params
  ; hWindow - The ID for window hosting the navigation panel
  ;
  ; Note: This function must be called at the same time as you create all the
  ; other window gadgets.
  ;
  Procedure.b CreateNavigationPanel(hWindow.i)
    Shared lastError$, hMainWindow, hNavPanel, configInfo, items()
    
    lastError$ = #Empty$
    
    If IsWindow(hWindow)
      hMainWindow = hWindow
      
      hNavPanel = ContainerGadget(#PB_Any, 10, 10, 200, 300, configInfo\Flags)
      If IsGadget(hNavPanel)
        CloseGadgetList()
        
        ; Configure the panel
        BindGadgetEvent(hNavPanel, @OnResizeNavigationPanel(), #PB_EventType_Resize)
        SetGadgetColor(hNavPanel, #PB_Gadget_BackColor, configInfo\BackgroundColor)

        ; Populate the panel
        LoadItems()
      EndIf
      
      lastError$ = "Failed to create Navigation Panel container"
      ProcedureReturn #False
    EndIf
    
    lastError$ = "Invalid Window ID passed to function - CreateNavigationPanel"
    ProcedureReturn #False
  EndProcedure
  
  ; Adds an item to the navigation panel
  ;
  ; Params
  ; id - The unique id for an item being added to the navigation panel
  ; name$ - The item name or title to be used when displayed the item in the navigation panel
  ; imageId - The ID of the image to be displayed in the navigation panel
  ; callback - The address of the function to be invoked when the item is clicked
  ; hotImageId - Optional.  An alternative image to use when the item is selected
  ; disabledImageId - Optional.  An alternative image to use when the item is disabled 
  ;
  ; Returns: False if an item with the given id has already been added to the panel, otherwise True.
  ;
  Procedure.b AddNavigationItem(id.i, name$, imageId.i, callback.OnNavigationItemClick, 
                                hotImageId.i = #PB_Ignore, disabledImageId.i = #PB_Ignore)
    Shared items(), lastError$
    
    lastError$ = #Empty$
    
    If ItemExists(id)
      lastError$ = "An item with this id () already exists!"
      ProcedureReturn #False
    EndIf
    
    AddElement(items())
    
    With items()
      \id = id
      \name = name$
      \image = imageId
      \disabled = #False
      \hotImage = hotImageId
      \disabledImage = disabledImageId
      \callback = callback
      \itemId = 0
      \itemX = #ITEM_HORIZONTAL_PADDING
      \itemY = 0
      \itemHeight = #ITEM_HEIGHT
      \itemEnabled = #True
      
      If \hotImage = #PB_Ignore
        \hotImage = \image
      EndIf
      
      If \disabledImage = #PB_Ignore
        \disabledImage = \image
      EndIf
    EndWith
        
    LoadItems()
    ProcedureReturn #True
  EndProcedure
  
  ; Removes an item from the navigation panel
  ;
  ; Params
  ; id - The id of the item to be removed
  ;
  ; Returns: True if successful, otherwise false
  ;
  Procedure.b RemoveNavigationItem(id.i)
    Shared items(), hNavPanel
    Protected found.b = #False
    
    ResetList(items())
    
    ForEach items()
      If items()\id = id
        If IsGadget(items()\itemId)
          FreeGadget(items()\itemId)
        EndIf
        
        DeleteElement(items())
        found = #True
        Break
      EndIf
    Next
    
    If found
      LoadItems()      
      ProcedureReturn #True
    EndIf
    
    ProcedureReturn #False
  EndProcedure
  
  ; Disable or enable a given item, based on the value passed
  ;
  ; Params
  ; id - The id of the item to be disabled/enabled
  ; value - #True if the item is to be disabled, #False if it is to be enabled
  ;
  Procedure.b DisableNavigationItem(id.i, value.b = #True)
    Shared items(), hNavPanel
    
    ResetList(items())
    ForEach items()
      With items()
        If \id = id
          If \disabled = value
            ProcedureReturn #True
          EndIf
          
          \disabled = value
          
          If \disabled
            SetGadgetState(\hIcon, \disabledImage)
            SetGadgetColor(\hLabel, #PB_Gadget_FrontColor, #Black)
            
            DisableGadget(\hLabel, #True) 
            DisableGadget(\itemId, #True)
          Else
            SetGadgetState(\hIcon, \image)
            DisableGadget(\hLabel, #False)
            DisableGadget(\itemId, #False)
          EndIf
          
          ProcedureReturn #True
          Break
        EndIf
      EndWith
    Next
    
    ProcedureReturn #False
  EndProcedure
  
  ; Initializes an instance of the configuration record
  ;
  ; Params
  ; *cfg - The address of the structure instance to populate
  ;
  ; Note: The best way to configure the navigation panel is to create
  ; an instance of the structure, populate it by calling this function
  ; and then customize the attributes as required
  ;
  Procedure.b InitNavigationPanelConfig(*cfg.NavigationPanelConfigInfo)
    With *cfg
      \BackgroundColor = #PB_Default
      \Flags = #PB_Container_BorderLess
      \ItemBackgroundColor = #PB_Default
      \ItemSelectedBackgroundColor = #PB_Default
      \ItemSelectedTextColor = #PB_Default
    EndWith
    
    ProcedureReturn #True
  EndProcedure
  
  ; Sets the navigation panel configuration
  ;
  ; Params
  ; *cfg - The address of the record to be used to config the navigation panel
  ;
  Procedure.b SetNavigationPanelConfig(*cfg.NavigationPanelConfigInfo)
    Shared configInfo
    
    CopyStructure(*cfg, @configInfo, NavigationPanelConfigInfo)
    
    ProcedureReturn #True
  EndProcedure
  
  ; Returns the id of the container panel used to host the navigation panel
  ;
  Procedure.i GetNavigationPanelId()
    Shared hNavPanel
    ProcedureReturn hNavPanel
  EndProcedure
  
  ; Programmatically select an item in the navigation panel
  ;
  ; Params
  ; id - The unique id of the item to select
  ; flag - If #True the item is selected, if not it is deselected
  ; executeProc - flag to indicate if associated procedure should be invoked
  ;
  ; Returns: False if the item is already selected, otherwise false
  ;
  Procedure.b SelectNavigationItem(id.i, flag.b = #True, executeProc.b = #False)
    Shared items(), currentItemId, configInfo, hNavPanel
    Protected.i hCurrentItemId, hCurrentIconId, hCurrentLabelId
    
    If (currentItemId = id) And flag
      ProcedureReturn #True
    EndIf
    
    ; Reset the current item
    ResetList(items())
    ForEach items()
      With items()
        If \id  = currentItemId
          SetGadgetColor(\itemId, #PB_Gadget_BackColor, configInfo\ItemBackgroundColor)
          SetGadgetColor(\hLabel, #PB_Gadget_FrontColor, #Black)
          SetGadgetState(\hIcon, \image)
          
          ResizeGadget(\itemId, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
          SetActiveGadget(hNavPanel)
          Break
        EndIf
      EndWith
    Next
    currentItemId = 0
    
    ; Select the new item
    If flag
      ResetList(items())
      ForEach items()
        With items()
          If \id  = id
            SetGadgetColor(\itemId, #PB_Gadget_BackColor, configInfo\ItemSelectedBackgroundColor)
            SetGadgetColor(\hLabel, #PB_Gadget_FrontColor, configInfo\ItemSelectedTextColor)
            SetGadgetState(\hIcon, \hotImage)
            
            ResizeGadget(\itemId, #PB_Ignore, #PB_Ignore, #PB_Ignore, #PB_Ignore)
            SetActiveGadget(\itemId)
            
            If executeProc
              \callback()
            EndIf
            
            Break
          EndIf
        EndWith
      Next
      
      currentItemId = id
    EndIf
  
    ProcedureReturn #True
  EndProcedure
EndModule
; IDE Options = PureBasic 6.21 - C Backend (MacOS X - arm64)
; ExecutableFormat = Console
; CursorPosition = 416
; FirstLine = 401
; Folding = ---
; EnableXP
; DPIAware